Assignment name  : cpp01_02
Expected files   :  Warlock.cpp Warlock.hpp
                    ASpell.hpp ASpell.cpp
				            ATarget.hpp ATarget.cpp
				            Fwoosh.hpp Fwoosh.cpp
				            Dummy.hpp Dummy.cpp
--------------------------------------------------------------------------------

In the Warlock class, the switch statement is FORBIDDEN.
switch문 사용이 금지

Create an abstract class called ASpell, in Coplien's form, 
ASpell이라는 추상 클래스를 Coplien 형식으로 생성

that has the following protected attributes:
* name (string)     이름 (문자열)
* effects (string)  효과 (문자열)

Both will have getters (getName and getEffects) that return strings.
Also add a clone pure method that returns a pointer to ASpell.
All these functions can be called on a constant object.
ASpell has a constructor that takes its name and its effects, in that order.

모든 속성에는 getter 함수(getName, getEffects)가 있으며 문자열을 반환합니다.
또한 ASpell 객체의 포인터를 반환하는 순수 가상 함수 clone을 추가합니다.
ASpell은 이름과 효과를 받는 생성자를 가집니다.

Now you will create an ATarget abstract class, in Coplien's form. 
It has a type attribute, which is a string, and its associated getter, getType, 
that return a reference to constant string.
In much the same way as ASpell, it has a clone() pure method.
All these functions can be called on a constant object.
It has a constructor that takes its type.
Now, add to your ATarget a getHitBySpell function that takes a reference to constant ASpell.

It will display :
<TYPE> has been <EFFECTS>!

<TYPE> is the ATarget's type, and <EFFECTS> is the return of the ASpell's
getEffects function.

ATarget이라는 추상 클래스를 Coplien 형식으로 생성합니다. 
이 클래스는 문자열 타입의 속성과 해당 속성에 대한 getter 함수(getType)를 가집니다.
clone() 순수 가상 함수도 포함합니다.
ATarget은 타입을 받는 생성자를 가집니다.
ATarget에 ASpell 참조를 매개변수로 받는 getHitBySpell 함수를 추가합니다. 
이 함수는 "<타입>이 <효과>됨!"을 표시합니다.

Finally, add to your ASpell class a launch function that takes a reference to constant ATarget.
ASpell 클래스에 ATarget 참조를 매개변수로 받는 launch 함수를 추가합니다. 이 함수는 전달된 객체의 getHitBySpell을 호출합니다.

This one will simply call the getHitBySpell of the passed object, passing the
current instance as parameter.

When all this is done, create an implementation of ASpell called Fwoosh. Its
default constructor will set the name to "Fwoosh" and the effects to
"fwooshed". You will, of course, implement the clone() method. In the case of
Fwoosh, it will return a pointer to a new Fwoosh object.

In the same way, create a concrete ATarget called Dummy, the type of which
is "Target Practice Dummy". You must also implement its clone() method.

Add to the Warlock the following member functions:

* learnSpell, takes a pointer to ASpell, that makes the Warlock learn a spell
* forgetSpell, takes a string corresponding a to a spell's name, and makes the
  Warlock forget it. If it's not a known spell, does nothing.
* launchSpell, takes a string (a spell name) and a reference to ATarget, that
  launches the spell on the selected target. If it's not a known spell, does
  nothing.

You will need a new attribute to store the spells your Warlock knows. Several
types fit the bill, it's up to you to choose the best one.

Below is a possible test main and its expected output:

int main()
{
  Warlock richard("Richard", "the Titled");

  Dummy bob;
  Fwoosh* fwoosh = new Fwoosh();

  richard.learnSpell(fwoosh);

  richard.introduce();
  richard.launchSpell("Fwoosh", bob);

  richard.forgetSpell("Fwoosh");
  richard.launchSpell("Fwoosh", bob);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, the Titled!$
Target Practice Dummy has been fwooshed!$
Richard: My job here is done!$